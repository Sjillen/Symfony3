<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
	public function myFindAll()
	{
		//Methode 1 : en passant par l'EntityManager
		$queryBuilder = $this->_em->createQueryBuilder()
			->select('a')
			->from($this->_entityName, 'a')
		;

		// Dans un respository, $this->_entityName est le namespace de l'entite geree
		// Ici, il vaut donc OC\PlatformBundle\Entity\Advert

		// Methode 2 : en passant par le raccourci (je recommande)
		$queryBuilder = $this->createQueryBuilder('a');

		//On n'ajoute pas de critere ou de tri particulier, la construction
		// de notre requete est finie

		// On recupre la Query a partir du QueryBuilder
		$query = $queryBuilder->getQuery();

		//On recupere les resultats a partir de la query
		$results = $query->getResult();

		//On retourne ces resultats
		return $results;
	}

	public function findByAuthorAndDate($author, $year)
	{
		$qb = $this->createQueryBuilder('a');

		$qb->where('a.author = :author')
				->setParameter('author', $author)
			->andWhere('a.date < :year')
				->setParameter('year', $year)
			->orderBy('a.date', 'DESC')
		;

		return $qb
			->getQuery()
			->getResult()
		;

	}

	public function whereCurrentYear(QueryBuilder $qb)
	{
		$qb
			->andWhere('a.date BETWEEN :start AND :end')
			->setParameter('start', new \Datetime(date('Y').'-01-01'))
			->setParameter('end', new \Datetime(date('Y').'-12-31'))
		;
	}

	public function getAdvertWithApplications()
	{
		$qb = $this
			->createQueryBuilder('a')
			->leftJoin('a.applications', 'app')
			->addSelect('app')
		;

		return $qb
			->getQuery()
			->getResult()
		;
	}

	public function getAdvertWithCategories(array $categoryNames)
	{
		$qb = $this->createQueryBuilder('a');

		//On fait une jointure avec l'entite Category avec pour alias "c"
		$qb
			->innerJoin('a.categories', 'c')
			->addSelect('c')
		;

		// Puis on filtre sur le nom des categories a l'aide d'un IN
		$qb->where($qb->expr()->in('c.name', $categoryNames));
		//La syntaxe du IN et d'autres expressions se trouvent dans la doc Doctrine

		//Enfin on retourne le resultat
		return $qb
			->getQuery()
			->getResult()
		;
	}
}
